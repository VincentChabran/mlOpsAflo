import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import pandas as pd
import joblib
import yaml
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from src.utils import load_data  # Nouvelle version
from src.preprocessing import preprocess_data  # Import du prÃ©traitement

# Charger la config
with open("config.yml", "r") as f:
    config = yaml.safe_load(f)


# Charger les donnÃ©es depuis la base SQLite
df = load_data("train")  # On charge les donnÃ©es d'entraÃ®nement
print("Colonnes disponibles aprÃ¨s chargement :", df.columns.tolist())

# Appliquer le prÃ©traitement
print("ğŸ“Š Colonnes AVANT prÃ©traitement (train) :", df.columns.tolist())

df = preprocess_data(df, is_train=True)

print("ğŸ“Š Colonnes APRÃˆS prÃ©traitement (train) :", df.columns.tolist())
print("ğŸ“Š Types des colonnes aprÃ¨s prÃ©traitement (train) :\n", df.dtypes)



# DÃ©finir les features et la target
y = df["trip_duration"]
X = df.drop(columns=["trip_duration"], errors="ignore")

# VÃ©rifier la structure des donnÃ©es aprÃ¨s prÃ©traitement
print("AperÃ§u des features aprÃ¨s prÃ©processing :")
print(X.head())


# SÃ©parer les donnÃ©es en train/test
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=config["test_size"], random_state=config["random_state"]
)


# DÃ©finir et entraÃ®ner le modÃ¨le
model = RandomForestRegressor(n_estimators=10, max_depth=5, random_state=42)
print("DÃ©but de l'entraÃ®nement du modÃ¨le...")
model.fit(X_train, y_train)
print("EntraÃ®nement terminÃ©.")


# Sauvegarder le modÃ¨le
joblib.dump(model, config["model_path"])
print(f"ModÃ¨le enregistrÃ© dans {config['model_path']}")
